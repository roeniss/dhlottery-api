# dhapi/.: __init__.py
[
]

# dhapi/.: main.py
[
from dhapi.router.router import entrypoint


def main():
    entrypoint()


if __name__ == "__main__":
    import sys
    sys.argv = ["dhapi","show-balance",]  # 명령어 인수를 하드코딩
    # sys.argv = ["dhapi", "--help"]  # 명령어 인수를 하드코딩
    entrypoint()
]

# dhapi/config: __init__.py
[
]

# dhapi/config: logger.py
[
import logging
import sys

def set_logger(is_debug):
    _log_level = logging.DEBUG if is_debug else logging.INFO

    logging.basicConfig(
        level=_log_level,
        format="%(message)s",
        datefmt="[%X]",
        handlers=[logging.StreamHandler()]  # Replace RichHandler with StreamHandler
    )
    sys.tracebacklimit = 1000 if is_debug else 0

    logging.debug(f"log level is set to {_log_level}, traceback limit is set to {sys.tracebacklimit}")
]

# dhapi/config/abc: logger.py
[
import logging
import sys

def set_logger(is_debug):
    _log_level = logging.DEBUG if is_debug else logging.INFO

    logging.basicConfig(
        level=_log_level,
        format="%(message)s",
        datefmt="[%X]",
        handlers=[logging.StreamHandler()]  # Replace RichHandler with StreamHandler
    )
    sys.tracebacklimit = 1000 if is_debug else 0

    logging.debug(f"log level is set to {_log_level}, traceback limit is set to {sys.tracebacklimit}")
]

# dhapi/port: __init__.py
[
]

# dhapi/port: credentials_provider.py
[
import logging

from dhapi.domain.user import User

logger = logging.getLogger(__name__)


class CredentialsProvider:
    def __init__(self, profile_name):
        # self._path = os.path.expanduser("~/.dhapi/credentials")
        self._credentials = self._get_credentials(profile_name)

    def _get(self, key):
        if key in self._credentials:
            return self._credentials[key]
        raise KeyError(f"프로필 정보에서 {key} 속성을 찾지 못했습니다.")

    def get_user(self) -> User:
        return User(self._get("username"), self._get("password"))

    def _get_credentials(self, profile_name):
        print(f"📝 프로필 이름: '{profile_name}'")
        
        # Always ask for user credentials
        print("📝 사용자 ID를 입력하세요: ", end="")
        user_id = input().strip()
        print("📝 사용자 비밀번호를 입력하세요: ", end="")
        user_pw = input().strip()

        credentials = {"username": user_id, "password": user_pw}
        return credentials]

# dhapi/port: lottery_client.py
[
import datetime
import json
import logging
from typing import List, Dict

import pytz
import requests
from bs4 import BeautifulSoup

from dhapi.domain.deposit import Deposit
from dhapi.domain.lotto645_ticket import Lotto645Ticket, Lotto645Mode
from dhapi.domain.user import User

logger = logging.getLogger(__name__)


class LotteryClient:
    _default_session_url = "https://dhlottery.co.kr/gameResult.do?method=byWin&wiselog=H_C_1_1"
    _system_under_check_url = "https://dhlottery.co.kr/index_check.html"
    _main_url = "https://dhlottery.co.kr/common.do?method=main"
    _login_request_url = "https://www.dhlottery.co.kr/userSsl.do?method=login"
    _buy_lotto645_url = "https://ol.dhlottery.co.kr/olotto/game/execBuy.do"
    _round_info_url = "https://www.dhlottery.co.kr/common.do?method=main"
    _ready_socket = "https://ol.dhlottery.co.kr/olotto/game/egovUserReadySocket.json"
    _cash_balance = "https://dhlottery.co.kr/userSsl.do?method=myPage"
    _assign_virtual_account_1 = "https://dhlottery.co.kr/nicePay.do?method=nicePayInit"
    _assign_virtual_account_2 = "https://dhlottery.co.kr/nicePay.do?method=nicePayProcess"

    def __init__(self, user_profile: User, lottery_endpoint):
        self._user_id = user_profile.username
        self._user_pw = user_profile.password
        self._lottery_endpoint = lottery_endpoint
        self._headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36",
            "Connection": "keep-alive",
            "Cache-Control": "max-age=0",
            "sec-ch-ua": '" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',
            "sec-ch-ua-mobile": "?0",
            "Upgrade-Insecure-Requests": "1",
            "Origin": "https://dhlottery.co.kr",
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Referer": "https://dhlottery.co.kr",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-User": "?1",
            "Sec-Fetch-Dest": "document",
            "Accept-Language": "ko,en-US;q=0.9,en;q=0.8,ko-KR;q=0.7",
            "X-Requested-With": "XMLHttpRequest",
        }
        self._set_default_session()
        self._login()

    # 로그인을 시도하면 새로운 JSESSIONID 값이 내려오는데,
    #  이 값으로 갱신하면 로그인이 풀리는 듯하여 헤더를 갱신하지 않음
    def _set_default_session(self):
        resp = requests.get(LotteryClient._default_session_url, timeout=10)
        logger.debug(f"resp.status_code: {resp.status_code}")
        logger.debug(f"resp.headers: {resp.headers}")

        if resp.url == LotteryClient._system_under_check_url:
            raise RuntimeError("동행복권 사이트가 현재 시스템 점검중입니다.")

        for cookie in resp.cookies:
            if cookie.name == "JSESSIONID":
                self._headers["Cookie"] = f"JSESSIONID={cookie.value}"
                break
        else:
            raise RuntimeError("JSESSIONID 쿠키가 정상적으로 세팅되지 않았습니다.")

    def _login(self):
        resp = requests.post(
            LotteryClient._login_request_url,
            headers=self._headers,
            data={
                "returnUrl": LotteryClient._main_url,
                "userId": self._user_id,
                "password": self._user_pw,
                "checkSave": "off",
                "newsEventYn": "",
            },
            timeout=10,
        )
        soup = BeautifulSoup(resp.text, "html5lib")
        if soup.find("a", {"class": "btn_common"}) is not None:
            raise RuntimeError(
                "로그인에 실패했습니다. 아이디 또는 비밀번호를 확인해주세요. (5회 실패했을 수도 있습니다. 이 경우엔 홈페이지에서 비밀번호를 변경해야 합니다)"
            )  # TODO(roeniss): 명확히 구분해서 알려주기

    def _get_round(self):
        resp = requests.get(self._round_info_url, timeout=10)
        soup = BeautifulSoup(resp.text, "html5lib")  # 'html5lib' : in case that the html don't have clean tag pairs

        elem = soup.find("strong", {"id": "lottoDrwNo"})
        if not elem:
            raise RuntimeError("현재 회차 정보를 가져올 수 없습니다.")

        return int(elem.text) + 1

    def buy_lotto645(self, tickets: List[Lotto645Ticket]):
        try:
            res = requests.post(url=self._ready_socket, headers=self._headers, timeout=5)
            direct = json.loads(res.text)["ready_ip"]

            logger.debug(f"direct: {direct}")

            data = {
                "round": str(self._get_round()),
                "direct": direct,
                "nBuyAmount": str(1000 * len(tickets)),
                "param": self._make_buy_loyyo645_param(tickets),
                "gameCnt": len(tickets),
            }
            logger.debug(f"data: {data}")

            resp = requests.post(
                self._buy_lotto645_url,
                headers=self._headers,
                data=data,
                timeout=10,
            )

            response_text = resp.text
            logger.debug(f"response: {response_text}")

            response = json.loads(response_text)
            if not self._is_purchase_success(response):
                raise RuntimeError(f"❗ 로또6/45 구매에 실패했습니다. (사유: {response['result']['resultMsg']})")

            slots = self._format_lotto_numbers(response["result"]["arrGameChoiceNum"])
            self._lottery_endpoint.print_result_of_buy_lotto645(slots)
        except RuntimeError as e:
            raise e
        except Exception:
            raise RuntimeError("❗ 로또6/45 구매에 실패했습니다. (사유: 알 수 없는 오류)")

    def _is_purchase_success(self, response):
        return response["result"]["resultCode"] == "100"

    def _make_buy_loyyo645_param(self, tickets: List[Lotto645Ticket]):
        params = []
        for i, t in enumerate(tickets):
            if t.mode == Lotto645Mode.AUTO:
                gen_type = "0"
            elif t.mode == Lotto645Mode.MANUAL:
                gen_type = "1"
            elif t.mode == Lotto645Mode.SEMIAUTO:
                gen_type = "2"
            else:
                raise RuntimeError(f"올바르지 않은 모드입니다. (mode: {t.mode})")
            arr_game_choice_num = None if t.mode == Lotto645Mode.AUTO else ",".join(map(str, t.numbers))
            alpabet = "ABCDE"[i]  # XXX: 오타 아님
            slot = {
                "genType": gen_type,
                "arrGameChoiceNum": arr_game_choice_num,
                "alpabet": alpabet,
            }
            params.append(slot)
        return json.dumps(params)

    def _format_lotto_numbers(self, lines: list) -> List[Dict]:
        """
        example: ["A|01|02|04|27|39|443", "B|11|23|25|27|28|452"]
        """

        mode_dict = {
            "1": "수동",
            "2": "반자동",
            "3": "자동",
        }

        slots = []
        for line in lines:
            slot = {
                "mode": mode_dict[line[-1]],
                "slot": line[0],
                "numbers": line[2:-1].split("|"),
            }
            slots.append(slot)
        return slots

    def show_balance(self):
        try:
            resp = requests.get(self._cash_balance, headers=self._headers, timeout=10)
            soup = BeautifulSoup(resp.text, "html5lib")

            has_bank_account = soup.select_one(".tbl_total_account_number_top tbody tr td").contents != []
            elem = soup.select("div.box.money")
            elem = elem[0]

            if has_bank_account is True:
                # 간편충전 계좌번호가 있는 경우
                총예치금 = self._parse_digit(elem.select("p.total_new > strong")[0].contents[0])
                구매가능금액 = self._parse_digit(elem.select("td.ta_right")[3].contents[0])
                예약구매금액 = self._parse_digit(elem.select("td.ta_right")[4].contents[0])
                출금신청중금액 = self._parse_digit(elem.select("td.ta_right")[5].contents[0])
                # 구매불가능금액 = self._parse_digit(elem.select("td.ta_right")[6].contents[0])  # (예약구매금액 + 출금신청중금액)
                # 이번달누적구매금액 = self._parse_digit(elem.select("td.ta_right")[7].contents[0])
            else:
                # 간편충전 계좌번호가 없는 경우
                총예치금 = self._parse_digit(elem.select("p.total_new > strong")[0].contents[0])
                구매가능금액 = self._parse_digit(elem.select("td.ta_right")[1].contents[0])
                예약구매금액 = self._parse_digit(elem.select("td.ta_right")[2].contents[0])
                출금신청중금액 = self._parse_digit(elem.select("td.ta_right")[3].contents[0])
                # 구매불가능금액 = self._parse_digit(elem.select("td.ta_right")[4].contents[0])  # (예약구매금액 + 출금신청중금액)
                # 이번달누적구매금액 = self._parse_digit(elem.select("td.ta_right")[5].contents[0])

            self._lottery_endpoint.print_result_of_show_balance(총예치금, 구매가능금액, 예약구매금액, 출금신청중금액,); #구매불가능금액, 이번달누적구매금액)

        except Exception:
            raise RuntimeError("❗ 예치금 현황을 조회하지 못했습니다.")

    def _parse_digit(self, text):
        return int("".join(filter(str.isdigit, text)))

    def assign_virtual_account(self, deposit: Deposit):
        try:
            resp = requests.post(
                self._assign_virtual_account_1,
                headers=self._headers,
                data={
                    "PayMethod": "VBANKFVB01",
                    "VbankBankCode": "089",  # 가상계좌 채번가능 케이뱅크 코드
                    "price": str(deposit.amount),
                    "goodsName": "복권예치금",
                    "vExp": self._get_tomorrow(),
                },
                timeout=10,
            )
            logger.debug(f"status_code: {resp.status_code}")

            data = resp.json()
            logger.debug(f"data: {data}")

            body = {
                "PayMethod": data["PayMethod"],
                "GoodsName": data["GoodsName"],
                "GoodsCnt": data["GoodsCnt"],
                "BuyerTel": data["BuyerTel"],
                "Moid": data["Moid"],
                "MID": data["MID"],
                "UserIP": data["UserIP"],
                "MallIP": data["MallIP"],
                "MallUserID": data["MallUserID"],
                "VbankExpDate": data["VbankExpDate"],
                "BuyerEmail": data["BuyerEmail"],
                "SocketYN": data["SocketYN"],
                "GoodsCl": data["GoodsCl"],
                "EncodeParameters": data["EncodeParameters"],
                "EdiDate": data["EdiDate"],
                "EncryptData": data["EncryptData"],
                "Amt": data["amt"],
                "BuyerName": data["BuyerName"],
                "VbankBankCode": data["VbankBankCode"],
                "VbankNum": data["FxVrAccountNo"],
                "FxVrAccountNo": data["FxVrAccountNo"],
                "VBankAccountName": data["BuyerName"],
                "svcInfoPgMsgYn": "N",
                "OptionList": "no_receipt",
                "TransType": "0",  # 일반(0), 에스크로(1)
                "TrKey": None,
            }
            logger.debug(f"body: {body}")

            resp = requests.post(self._assign_virtual_account_2, headers=self._headers, data=body, timeout=10)
            logger.debug(f"resp: {resp}")

            soup = BeautifulSoup(resp.text, "html5lib")

            elem = soup.select("#contents")

            logger.debug(f"elem: {elem}")

            전용가상계좌 = elem[0].select("span")[0].contents[0]
            결제신청금액 = elem[0].select(".color_key1")[0].contents[0]

            self._lottery_endpoint.print_result_of_assign_virtual_account(전용가상계좌, 결제신청금액)
        except Exception:
            raise RuntimeError("❗ 가상계좌를 할당하지 못했습니다.")

    def _get_tomorrow(self):
        korea_tz = pytz.timezone("Asia/Seoul")
        now = datetime.datetime.now(korea_tz)
        tomorrow = now + datetime.timedelta(days=1)
        return tomorrow.strftime("%Y%m%d")
]

# dhapi/domain: __init__.py
[
]

# dhapi/domain: user.py
[
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
]

# dhapi/domain: deposit.py
[
import logging

logger = logging.getLogger(__name__)


class Deposit:
    def __init__(self, amount: int):
        try:
            amount = int(amount)
        except ValueError:
            raise ValueError(f"숫자를 입력하세요 (입력된 값: {amount}).")

        if amount not in [5000, 10000, 20000, 30000, 50000, 100000, 200000, 300000, 500000, 700000, 1000000]:
            raise ValueError(f"입금 가능한 금액은 5천원, 1만원, 2만원, 3만원, 5만원, 10만원, 20만원, 30만원, 50만원, 70만원, 100만원입니다 (입력된 값: {amount}).")

        self.amount = amount
]

# dhapi/domain: lotto645_ticket.py
[
from enum import Enum
from typing import List, Optional


class Lotto645Mode(str, Enum):
    AUTO = "auto"
    SEMIAUTO = "semiauto"
    MANUAL = "manual"


class Lotto645Ticket:
    def __init__(self, numbers: Optional[str] = None):
        try:
            if not numbers:
                self.numbers = []
            else:
                self.numbers = sorted(list(map(int, numbers.split(","))))
        except ValueError:
            raise ValueError(f"숫자를 입력하세요 (입력된 값: {numbers}).")

        if len(self.numbers) != len(set(self.numbers)):
            raise ValueError(f"중복되지 않도록 숫자들을 입력하세요 (입력된 값: {numbers}).")

        for n in self.numbers:
            if not 1 <= n <= 45:
                raise ValueError(f"각 번호는 1부터 45까지의 숫자만 사용할 수 있습니다 (입력된 값: {n}).")

        if len(self.numbers) == 6:
            self.mode = Lotto645Mode.MANUAL
        elif 1 <= len(self.numbers) <= 5:
            self.mode = Lotto645Mode.SEMIAUTO
        elif len(self.numbers) == 0:
            self.mode = Lotto645Mode.AUTO
        else:
            raise ValueError(f"숫자는 0개 이상 6개 이하의 숫자를 입력해야 합니다 (입력된 값: {numbers}).")

    @property
    def mode_kor(self):
        if self.mode == Lotto645Mode.AUTO:
            return "자동"
        elif self.mode == Lotto645Mode.SEMIAUTO:
            return "반자동"
        elif self.mode == Lotto645Mode.MANUAL:
            return "수동"
        else:
            raise RuntimeError("지원하지 않는 게임 타입입니다.")

    @staticmethod
    def create_auto_tickets(count: int):
        return [Lotto645Ticket() for _ in range(count)]

    @staticmethod
    def create_tickets(numbers_list: List[str]):
        return [Lotto645Ticket(numbers) for numbers in numbers_list]
]

# dhapi/endpoint: version_stdout_printer.py
[
class VersionStdoutPrinter:

    def print_version(self, version):
        print("현재버전")
        print(version)
]

# dhapi/endpoint: __init__.py
[
]

# dhapi/endpoint: lottery_stdout_printer.py
[
class LotteryStdoutPrinter:
    def print_result_of_assign_virtual_account(self, 전용가상계좌, 결제신청금액):
        print("✅ 가상계좌를 할당했습니다.\n❗️입금 전 계좌주 이름을 꼭 확인하세요.")
        print(f"전용가상계좌: {전용가상계좌}\n결제신청금액: {결제신청금액}\n")

    def print_result_of_show_balance(self, 총예치금, 구매가능금액, 예약구매금액, 출금신청중금액):
        print("✅ 예치금 현황을 조회했습니다.")
        print(f"총예치금: {self._num_to_money_str(총예치금)}")
        print(f"구매가능금액: {self._num_to_money_str(구매가능금액)}")
        print(f"예약구매금액: {self._num_to_money_str(예약구매금액)}")
        print(f"출금신청중금액: {self._num_to_money_str(출금신청중금액)}\n")

    def _num_to_money_str(self, num):
        return f"{num:,} 원"

    def print_result_of_buy_lotto645(self, slots):
        """
        :param slots: [{"slot": "A", "mode": "자동", "numbers": [1, 2, 3, 4, 5, 6]}, ...]
        :return:
        """
        print("✅ 로또6/45 복권을 구매했습니다.")
        print("슬롯 | Mode | 번호1 | 번호2 | 번호3 | 번호4 | 번호5 | 번호6")
        for slot in slots:
            numbers = " | ".join(map(str, slot["numbers"]))
            print(f"{slot['slot']} | {slot['mode']} | {numbers}")
]

# dhapi/purchase: __init__.py
[
]

# dhapi/purchase: lotto645_buy_confirmer.py
[
import logging
from typing import List
from dhapi.domain.lotto645_ticket import Lotto645Ticket

logger = logging.getLogger(__name__)


class Lotto645BuyConfirmer:
    def confirm(self, tickets: List[Lotto645Ticket], always_yes: bool = False):
        self._show_buy_preview(tickets)
        print("❓ 위와 같이 구매하시겠습니까? [Y/n] ", end="")

        if always_yes:
            print("\n✅ --yes 플래그가 주어져 자동으로 구매를 진행합니다.")
            return True
        elif input().strip().lower() in ["y", "yes", ""]:
            return True

        print("❗️구매를 취소했습니다.")
        return False

    def _show_buy_preview(self, tickets):
        slots = "ABCDE"

        print("슬롯 | Mode | 번호1 | 번호2 | 번호3 | 번호4 | 번호5 | 번호6")
        for i, ticket in enumerate(tickets):
            numbers = " | ".join(self._numbers_formatted(ticket.numbers))
            print(f"{slots[i]} | {ticket.mode_kor} | {numbers}")

    def _numbers_formatted(self, numbers: List[int]):
        _numbers = [str(n) for n in numbers]
        for _ in range(6 - len(_numbers)):
            _numbers.append("-")
        return _numbers
]

# dhapi/router: __init__.py
[
]

# dhapi/router: router.py
[
from typing import Annotated, Optional, List

import typer

from dhapi.config.logger import set_logger
from dhapi.domain.deposit import Deposit
from dhapi.domain.lotto645_ticket import Lotto645Ticket
from dhapi.port.credentials_provider import CredentialsProvider
from dhapi.router.dependency_factory import build_lottery_client, build_version_provider, build_lotto645_buy_confirmer

app = typer.Typer(
    help="동행복권 비공식 API\n\n각 명령어에 대한 자세한 도움말은 'dhapi [명령어] -h'를 입력하세요.",
    context_settings={"help_option_names": ["-h", "--help"]},
    no_args_is_help=True,
    pretty_exceptions_show_locals=False,
    pretty_exceptions_enable=False,
    add_completion=False,
)


def logger_callback(is_debug: bool):
    app.pretty_exceptions_enable = is_debug
    set_logger(is_debug)


def version_callback(show_version: Optional[bool]):
    if show_version:
        version_provider = build_version_provider()
        version_provider.show_version()
        raise typer.Exit()


@app.command(
    help="""
예치금 충전용 가상계좌를 세팅합니다.

dhapi에서는 본인 전용 계좌를 발급받는 것까지만 가능합니다. 출력되는 계좌로 직접 입금해주세요.
""",
)
def assign_virtual_account(
        amount: Annotated[
            int, typer.Argument(help="입금할 금액을 지정합니다 (5천원, 1만원, 2만원, 3만원, 5만원, 10만원, 20만원, 30만원, 50만원, 70만원, 100만원 중 하나)", metavar="amount")
        ] = 50000,
        profile: Annotated[str, typer.Option("-p", "--profile", help="프로필을 지정합니다", metavar="")] = "default",
        _debug: Annotated[bool, typer.Option("-d", "--debug", help="debug 로그를 활성화합니다.", callback=logger_callback)] = False,
):
    user = CredentialsProvider(profile).get_user()
    deposit = Deposit(amount)

    client = build_lottery_client(user)
    client.assign_virtual_account(deposit)


@app.command(
    help="""
예치금 현황을 조회합니다.
"""
)
def show_balance(
        profile: Annotated[str, typer.Option("-p", "--profile", help="프로필을 지정합니다", metavar="")] = "default",
        _debug: Annotated[bool, typer.Option("-d", "--debug", help="debug 로그를 활성화합니다.", callback=logger_callback)] = False,
):
    user = CredentialsProvider(profile).get_user()

    client = build_lottery_client(user)
    client.show_balance()


@app.command(
    help="""
로또6/45 복권을 구매합니다.

매주 최대 다섯 장까지 구매할 수 있습니다 (5 tickets).

[예시]

dhapi buy-lotto645 : 자동모드 5장 (default)

dhapi buy-lotto645 '' : 자동모드 1장

dhapi buy-lotto645 '1,2,3,4,5,6' : 수동모드 1장 (고정번호: 1,2,3,4,5,6)

dhapi buy-lotto645 '1,2,3' : 반자동모드 1장 (고정번호: 1,2,3)

dhapi buy-lotto645 '1,2,3,4,5,6' '7,8,9' : 수동모드 1장 (고정번호: 1,2,3,4,5,6), 반자동모드 1장 (고정번호: 7,8,9)

dhapi buy-lotto645 '' '' '' '1' : 자동모드 3장, 반자동모드 1장 (고정번호: 1)
"""
)
def buy_lotto645(
        tickets: Annotated[List[str], typer.Argument(help="구매할 번호를 입력합니다. 생략 시 자동모드로 5장 구매합니다.", metavar="tickets", show_default=False)] = None,
        always_yes: Annotated[bool, typer.Option("-y", "--yes", help="구매 전 확인 절차를 스킵합니다.")] = False,
        profile: Annotated[str, typer.Option("-p", "--profile", help="프로필을 지정합니다", metavar="")] = "default",
        _debug: Annotated[bool, typer.Option("-d", "--debug", help="debug 로그를 활성화합니다.", callback=logger_callback)] = False,
):
    cred = CredentialsProvider(profile)
    user = cred.get_user()
    tickets = Lotto645Ticket.create_tickets(tickets) if tickets else Lotto645Ticket.create_auto_tickets(count=5)

    client = build_lottery_client(user)
    confirmer = build_lotto645_buy_confirmer()

    ok = confirmer.confirm(tickets, always_yes)
    if not ok:
        raise typer.Exit()

    client.buy_lotto645(tickets)


@app.command(
    help="""
dhapi 버전을 출력합니다.
"""
)
def version():
    version_callback(True)


def entrypoint():
    app()
]

# dhapi/router: dependency_factory.py
[
from dhapi.domain.user import User
from dhapi.endpoint.lottery_stdout_printer import LotteryStdoutPrinter
from dhapi.endpoint.version_stdout_printer import VersionStdoutPrinter
from dhapi.meta.version_provider import VersionProvider
from dhapi.port.lottery_client import LotteryClient
from dhapi.purchase.lotto645_buy_confirmer import Lotto645BuyConfirmer


def build_lottery_client(user_profile: User):
    lottery_endpoint = build_lottery_endpoint()
    return LotteryClient(user_profile, lottery_endpoint)


def build_lotto645_buy_confirmer():
    return Lotto645BuyConfirmer()


def build_lottery_endpoint():
    return LotteryStdoutPrinter()


def build_version_provider():
    version_endpoint = build_version_endpoint()
    return VersionProvider(version_endpoint)


def build_version_endpoint():
    return VersionStdoutPrinter()
]

# dhapi/meta: version_provider.py
[
from importlib.metadata import version


class VersionProvider:
    def __init__(self, version_endpoint):
        self._version_endpoint = version_endpoint
        self._package_name = "dhapi"

    def show_version(self):
        package_version = version(self._package_name)
        self._version_endpoint.print_version(package_version)
]

# dhapi/meta: __init__.py
[
]

